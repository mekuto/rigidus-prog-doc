
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta http-equiv="Content-Language" content="ru">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">


<title>GNU Common Lisp - часть 1</title>
<meta name="Microsoft Theme" content="blueprnt 0000, default">
<meta name="Microsoft Border" content="tlb, default">
</head>

<body bgcolor="#FFFFFF" text="#003399" link="#3366FF" vlink="#9900FF" alink="#000066"  ><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="Times New Roman">
<p></p>
<p>&nbsp;<img src="../../images/cartonarmy.gif" alt="[Картонная Армия - от галеры до ракеты!]" border="0" width="468" height="60">
</p>
<p>
<a href="../../index.htm"><img src="../../_derived/home_cmp_blueprnt000_gbtn.gif" width="95" height="20" border="0" alt="Домой" align="middle"></a> <a href="../gcl.htm"><img src="../../_derived/up_cmp_blueprnt000_gbtn.gif" width="95" height="20" border="0" alt="Вверх" align="middle"></a> <a href="../../toc.htm"><img src="../../_derived/toc.htm_cmp_blueprnt000_gbtn.gif" width="95" height="20" border="0" alt="Содержание" align="middle"></a></p>
<p>
<img src="_derived/art1.htm_cmp_blueprnt000_bnr.gif" width="600" height="60" border="0" alt="Lisp - первые шаги">
<br>
<img src="_derived/art1.htm_cmp_blueprnt000_hbtn_p.gif" width="140" height="60" border="0" alt="Lisp - первые шаги" align="middle"> <a href="art2.htm"><img src="_derived/art2.htm_cmp_blueprnt000_hbtn.gif" width="140" height="60" border="0" alt="Lisp -атомы и списки" align="middle"></a> <a href="art3.htm"><img src="_derived/art3.htm_cmp_blueprnt000_hbtn.gif" width="140" height="60" border="0" alt="Lisp - переменные" align="middle"></a> <a href="art4.htm"><img src="_derived/art4.htm_cmp_blueprnt000_hbtn.gif" width="140" height="60" border="0" alt="Lisp - вызов функций" align="middle"></a> <a href="art5.htm"><img src="_derived/art5.htm_cmp_blueprnt000_hbtn.gif" width="140" height="60" border="0" alt="Программные блоки" align="middle"></a> <a href="art6.htm"><img src="_derived/art6.htm_cmp_blueprnt000_hbtn.gif" width="140" height="60" border="0" alt="Структуры данных" align="middle"></a>
</p>
<p>&nbsp;</p>

<!--mstheme--></font></td></tr><!--msnavigation--></table><!--msnavigation--><table dir="ltr" border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top" width="1%"><!--mstheme--><font face="Times New Roman">
<p>&nbsp;</p>
<p><a href="http://">
</a>
</p>

<!--mstheme--></font></td><td valign="top" width="24"></td><!--msnavigation--><td valign="top"><!--mstheme--><font face="Times New Roman">
<!--msthemeseparator--><p align="center"><img src="../../_themes/blueprnt/bluhorsd.gif" width="600" height="10" alt="horizontal rule"></p>


      <p> &nbsp; </p>
   
<div align="Right">  
<h3>В.Водолазкий</h3>
   
<div align="Center">  
<h1><!--mstheme--><b>Первые шаги в GNU Common Lisp<!--mstheme--></b></h1>
  <br>
   
<blockquote>      
  <blockquote>          
    <blockquote>              
      <blockquote><i>В статье рассматриваются начальные шаги по освоению
языка программирования Lisp. Описывается процедура установки среды в системе
Linux и приводятся примеры нескольких простых программ. Описание основано
на версии GNU Common Lisp.</i><br>
          <br>
          <br>
          </blockquote>
          </blockquote>
          </blockquote>
          </blockquote>
          </div>
          </div>
   Наверняка читатели слышали о языке Лисп. И я более чем уверен, что подавляющее 
 большинство никогда не видело Лисп в работе, ну, возможно, за исключением 
простых программ на Автокаде или десятистрочных "поделок" в рамках
семинаров 
по курсу "алгоритмические языки и программирование". Причин такому
положению дел достаточно много, но как ни удивительно, в основе лежит несколько мифов...<br>
          <br>
                   
        <h3>Мифы о языке Лисп</h3>
  Вот несколько наиболее распространенных "страшных историй" с которых я
хотел  бы начать.<br>
                   
        <!--mstheme--></font><!--msthemelist--><table border="0" cellpadding="0" cellspacing="0" width="100%">
                       
          <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../../_themes/blueprnt/blubul1d.gif" width="15" height="15" hspace="13" alt="bullet"></td><td valign="top" width="100%"><!--mstheme--><font face="Times New Roman"><b>Лисп безнадежно устарел</b>. Самый старый миф. Действительно,
 Лисп появился еще в конце 50-х годов прошлого века, и уже тогда заметно
отличался  от своих собратьев. Но собственно говоря, уже тогда начало формироваться
два класса языков - процедурный ( тот же Фортран, Алгол и т.д.) и функциональный,
 примерами которых являются Лисп. РЕФАЛ, Форт и еще несколько других. За
эти  годы многие из языков, которые громко объявлялись как "универсальные"
(вспомним  Кобол и PL/1) постепенно канули в Лету, а Лисп, как хорошее марочное
вино,  постепенно набирал выдержку и становился все мощнее и интереснее.
В современных  версиях языка (о которых мы и
            будем говорить), вы найдете
все те решения,  которые были беззастенчиво позаимствованы в С++, Perl и
других популярных  языках. Но, увы, копии не смогли превзойти оригинал...<!--mstheme--></font><!--msthemelist--></td></tr>
                       
          <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../../_themes/blueprnt/blubul1d.gif" width="15" height="15" hspace="13" alt="bullet"></td><td valign="top" width="100%"><!--mstheme--><font face="Times New Roman"><b>На Лиспе никто не пишет... </b>Ага, это секретный язык г-на
 Водолазкого... Он владеет им в гордом одиночестве! Ну что вы право... Взгляните,
 например, на конференцию USENET <b>comp.lang.lisp</b>. Ежедневно в нее помещается
 порядка 350-500 статей, что возможно, меньше, чем в конференцию, посвященную
            Delphi, но вот уровень поднимаемых вопросов гораздо выше. Лисп является
исключительно  популярной системой при реализации встроенных языков расширения
программных  систем. Самые популярные примеры - EMACS и
            Autocad, но пользователям
Linux  стоит упомянуть также и GIMP.  Стоит также упомянуть, что программисты
на  Лиспе являются предметом постоянной охоты западных рекрутинговых агентств
 и с завидным постоянством выявленные таланты вывозятся с территории стран
 СНГ. Впрочем, если учесть, что министерство обороны США объявило Common
Lisp  официальным языком для построения военных систем искусственного интеллекта,
 это неудивительно.<!--mstheme--></font><!--msthemelist--></td></tr>
                       
          <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../../_themes/blueprnt/blubul1d.gif" width="15" height="15" hspace="13" alt="bullet"></td><td valign="top" width="100%"><!--mstheme--><font face="Times New Roman"><b>Я не вижу спроса на Лисп-программирование. </b>Спрос бывает
 разный. Программисты на Лиспе действительно не нужны при разработке бухгалтерских
 программ. У Лиспа совершенно другая ниша - это язык для решения действительно
 интересных, а потому  сложных задач. Кстати, задачи
            искусственного интеллекта
 являются только небольшой областью, в которой Лисп занимает ведущие позиции
 во всем мире. Программисты на Лиспе являются наиболее тщательно оберегаемыми
 от внешнего мира интеллектуальными ресурсами
            крупнейших компаний - именно
они разрабатывают программные комплексы стратегического планирования и анализа,
 а поэтому реклама им не нужна - хорошие заработки и сдувание пылинок гарантированы!<!--mstheme--></font><!--msthemelist--></td></tr>
                       
          <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../../_themes/blueprnt/blubul1d.gif" width="15" height="15" hspace="13" alt="bullet"></td><td valign="top" width="100%"><!--mstheme--><font face="Times New Roman"><b>В Лиспе нет графического интерфейса... </b>Просто потрясающе!
 Самый первый графический интерфейс, с которого впоследствии были слизаны
и Microsoft Windows и MacOS были реализованы именно на Лисп-машине! Никаких
 проблем в том, чтобы реализовать графический интерфейс и на обычной платформе
 PC нет - и в этом вы убедитесь прямо сегодня!<!--mstheme--></font><!--msthemelist--></td></tr>
                       
          <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../../_themes/blueprnt/blubul1d.gif" width="15" height="15" hspace="13" alt="bullet"></td><td valign="top" width="100%"><!--mstheme--><font face="Times New Roman"><b>Лисп работает очень медленно. </b>Честно говоря, я тоже
так думал. Но еще лет десять назад, под влиянием нескольких публикаций о
реализации Лиспа на Бейсике, я написал небольшой (но полностью функциональный
и расширяемый) интерпретатор Лиспа на языке Паскаль для ДВК-3. И что вы думаете?
Мой доморощенный Лисп работал на вычислительных задачах быстрее, чем родной
Бейсик фирмы DEC! А вывод прост - эффективность языка во многом определяется
как его реализацией, так и качеством прикладных программ. Ну да ладно хвастаться
былыми достижениями, современные версии Лиспа (например, GNU Common
            Lisp)
построены куда изящнее, чем моя поделка и на современных платформах работаю
весьма и весьма прилично. А если добавить возможность распараллеливания работы
Лисп-программ на нескольких машинах в сети (при желании читателей этому вопросу
будет посвящена отдельная статья), то становится ясно, что никаких принципиальных
ограничений для производительности Лисп-систем сегодня нет.<!--mstheme--></font><!--msthemelist--></td></tr>
                       
          <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../../_themes/blueprnt/blubul1d.gif" width="15" height="15" hspace="13" alt="bullet"></td><td valign="top" width="100%"><!--mstheme--><font face="Times New Roman"><b>Для Лиспа нет компилятора. </b>Вообще то, это так, поскольку
 для серьезных Лисп-программ полная компиляция противопоказана - ведь в этом
 языке единство кода и данных поддерживается на все 100% и зачастую программа
 синтезируется непосредственно во время выполнения. Но что касается использования
 компилятора для генерирования промежуточного кода, ускоряющего последующую
 загрузку и выполнение программ, а также защиту исходного кода программ,
то  такие решения есть, и входят в состав стандартных дистрибутивов (вернее
сказать,  встроены в саму среду Лиспа).<!--mstheme--></font><!--msthemelist--></td></tr>
                       
          <!--msthemelist--><tr><td valign="baseline" width="42"><img src="../../_themes/blueprnt/blubul1d.gif" width="15" height="15" hspace="13" alt="bullet"></td><td valign="top" width="100%"><!--mstheme--><font face="Times New Roman"><b>В Лиспе слишком много скобок... </b>Ах, мне бы ваши проблемы!
 Тосно так же можно утверждать, что в Паскале слишком часто используется
двоеточие,  а в Си - точка с запятой. Да, плохо написанная программа просто
пестрит скобками,  но ведь это именно <b>плохо написанная программа</b>,
а не Лисп как таковой...<!--mstheme--></font><!--msthemelist--></td></tr>
                   
        <!--msthemelist--></table><!--mstheme--><font face="Times New Roman">
          <br>
                   
        <h3>Лисп шаг за шагом </h3>
  Ну что же, если вы хотя бы частично согласились с моими доводами, давайте
 попробуем пощупать Лисп собственными руками. В принципе, практически в любой
 дистрибутив Linux входит та или иная версия Лиспа, но мы будем вести речь
 об "официальной версии" проекта GNU, которая по вполне понятным причинам
называется         <b>GNU Common Lisp</b>  (GCL). На момент написания этих
строк последней  версией на сервере <b>ftp.gnu.org </b>являлась версия 2.4.1.
О ней пойдет  речь ниже. В состав Slackware 8.0 входит установленная система
GCL 2.4.0.  Все описываемые примеры вполне работоспособны и в ней, но все
равно я рекомендую  вам извлечь дистрибутив в котором вы найдете массу полезной
информации.<br>
          <br>
                   
        <h4>Установка GCL</h4>
          <img src="article1/gcl1.jpg" alt="" align="Left" width="300" height="124">
  Первое, с чего следует начать, это установить Лисп на вашей машине. К слову
 сказать, если на вашем компьютере установлен дистрибутив Slackware 4.0,
то  при работе на машинах класса выше Pentium-I GCL работать откажется -
скажутся  ошибки в устаревших версиях системных библиотек. Так что позаботьтесь
об обновлении программного обеспечения. Итак, ваша задача извлечь c с сервера
GNU или одного из его зеркал дистрибутив Common
Lisp, который находится в
файле <b>gcl-2.4.1.tgz</b> , а затем распаковать его (я обычно использую
для этой цели каталог /usr/src) и собрать:<br>
          <br>
          <!--mstheme--></font><pre><font face="Courier" color="#000000">cd /usr/src</font></pre><!--mstheme--><font face="Times New Roman">
          <!--mstheme--></font><pre><font face="Courier" color="#000000">tar xvfz gcl-2.4.1.tgz</font></pre><!--mstheme--><font face="Times New Roman">
          <!--mstheme--></font><pre><font face="Courier" color="#000000">cd gcl-2.4.1</font></pre><!--mstheme--><font face="Times New Roman">
          <!--mstheme--></font><pre><font face="Courier" color="#000000">./configure</font></pre><!--mstheme--><font face="Times New Roman">
          <!--mstheme--></font><pre><font face="Courier" color="#000000">make </font></pre><!--mstheme--><font face="Times New Roman">
          <!--mstheme--></font><pre><font face="Courier" color="#000000">make install</font></pre><!--mstheme--><font face="Times New Roman">
          <br>
  Все! Система установлена и готова к работе. Никаких перезагрузок не потребуется.
 Теперь давайте проверим ее работоспособность.<br>
         <br>
         
        <h4>Первый вызов Лиспа</h4>
         <br>
  Для этого нам нужно вызвать интерпретатор Лиспа с помощью команды <b>gcl</b>
 . Ну а что делать дальше, показано на рис.1<br>
          <br>
          <img src="article1/gcl1.png" alt="Первая проба пера в Лиспе" align="Center">
          <br>
          <br>
          <b>Рис.1. Первая проба пера в Лиспе<br>
          </b><br>
  Итак, что мы видим... Во-первых, разработчики забыли сменить номер версии,
 и хотя мы устанавливали GCL 2.4.1 система не признает новый номер версии
и по-прежнему выводить старый. Но это опытного программиста пугать не должно.
 Далее вы можете увидеть как с помощью встроенных функций Лиспа можно решать
 вычислительные задачи. Несмотря на кажущуюся непривычность записи все достаточно
 просто. Лет сто назад Владимир Ильич Ленин по какому-то случаю заметил,
что  весь мир можно описать с помощью дифференциальных функций. Лисп некоторым
 образом поддерживает этот подход - в нем все также представляется с помощью
 функций. Любое выражение в Лиспе представляет собой вызов функции, оформленной
 достаточно стандартным образом,<br>
          <br>
          <!--mstheme--></font><pre><font color="#000000">(имя_функции &nbsp;аргумент_1 &nbsp;аргумент_2 ...)</font></pre><!--mstheme--><font face="Times New Roman">
          <br>
  В данном случае на рис.1 представлено три стандартные (то есть встроенные)
 функции -  <b>+</b>, <b>-</b> и <b>bye</b>. Последняя функция, хотя и вызывается
 вообще без аргументов очень важна, поскольку никакими другими способами,
за исключением снятия задачи с помощью команды <b>kill </b>вы покинуть Лисп
не сможете.  Стандартных функций в Лиспе за последние полсотни лет накопилось
 достаточно много, но знать их все вам не потребуется - Лисп относится к
тем  языкам, где зачастую проще заново изобрести велосипед, предназначенный
для  одноразовой поездки, чем изучать неизвестную вам до сих пор стандартную
функцию.          <br>
          <br>
         
        <h4>Создание собственных функций</h4>
         <br>
  Теперь давайте попробуем продвинуться чуть дальше. Итак, мы уже знаем,
как  вызывается функция с аргументами-константами, но ведь нам может потребоваться
 вычислить значение этих аргументов? Давайте в качестве примера рассчитаем
 длину гипотенузы прямоугольного треугольника со сторонами 3 и 4. Для этого
 вам достаточно ввести в gcl команду:<br>
          <br>
          <!--mstheme--></font><pre><font color="#000000">(sqrt (+ (*3 3) (* 4 4)))</font></pre><!--mstheme--><font face="Times New Roman">
          <br>
  В результате на выходе вы получите число <b>5.0</b>. Обратите внимание, 
что Лисп самостоятельно осуществляет приведение типов переменных и вам обычно
 не нужно преобразовывать тип аргумента или результата к какому-либо конкретному
 виду. Эта черта Лиспа беззастенчиво воровалась огромным количеством разработчиков
 и не раз выдавалась за "уникальное достижение", хотя впервые появилась еще
 50 лет назад. <br>
          <br>
  Ну да ладно, пора двигаться дальше. Давайте попробуем теперь создать собственную
 функцию, которая позволит нам рассчитывать
гипотенузу для любого прямоугольного
 треугольника. Для этого нам потребуется так называемая <i>специальная форма</i>
    - конструкция Лиспа, обеспечивающая генерацию исходного кода программы.
 Впрочем, для программиста эта форма ничем не отличается от функции. Имя
этоф  формы <b>defun </b>и общий ее вид следующий,<br>
          <br>
          <!--mstheme--></font><pre><font color="#000000">(defun &nbsp; ( &lt;список_аргументов&gt;)</font></pre><!--mstheme--><font face="Times New Roman">
          <!--mstheme--></font><pre><font color="#000000">&nbsp; &nbsp; &nbsp; &lt;тело-функции&gt;</font></pre><!--mstheme--><font face="Times New Roman">
          <!--mstheme--></font><pre><font color="#000000">&nbsp;)</font></pre><!--mstheme--><font face="Times New Roman">
  Понятно, что список аргументов может быть пустым, как например, у функции
bye. Что касается тела функции, то это последовательность вызова функций
Лиспа, которые реализуют логику работы создаваемой нами функции. Любая функция
возвращает результат - это значение, получаемое в результате вычисления последней
функции в теле. Фуу-ф, понятие "функция" настолько часто встречается в Лиспе,
что избежать тавтологии кажется совершенно невозможным...<br>
          <br>
          <br>
  Но ближе к делу, чтобы продемонстрировать еще пару моментов, мы поступим
 следующим образом. Открывайте любой текстовый редактор и вводите определения,
 представленные на рис.2. <br>
          <br>
          <img src="article1/gcl2.png" alt="">
          <br>
          <br>
          <b>Рис.2. Программа расчета сторон прямоугольного треугольника</b><br>
          <br>
  Прежде чем приступить к запуску этой программы на выполнение, давайте отметим
 несколько новых понятий. Во-первых, точка с запятой является идентификатором
 текстового комментария. При этом в Лиспе существует традиция, по которой
тремя точками с запятой отделяются комментарии, имеющие отношение ко всей
программе в целом, двумя - к отдельной функции или фрагменту кода, а одна
точка с запятой ставится в конце строки, если комментарий имеет локальный
характер и относится только к этой отдельной строке.<br>
          <br>
  Второе, на что необходимо обратить внимание - это определение функций. 
Я глубоко убежден, что писать тексты программ по-русски все же удобнее, чем
 по-английски, особенно, если оценки за "аглицкий" в школе выше тройки поднимались
 редко. И мое субъективное  мнение разделяют 
французы (книги по Лиспу на
французском используют примеры, написанные на французском) и даже финны,
которых не больше, чем жителей в Московской области. А то, что мы используем
кириллицу, только играет нам на руку - вы сразу видите, работаете ли вы со
встроенной функцией, или со своей собственной.<br>
          <br>
  Сами определения функций имеют вполне обыденный вид. В принципе можно было
 бы обойтись и одной функцией <b>гипотенуза</b>, но введение дополнительной
 функции <b>квадрат</b> упрощает понимание всей программы, и позволяет предотвратить
 дублирование ввода одного и того же кода.  Это как раз и является предпосылкой
 для сокращения количества вложенных скобок в Лиспе - старайтесь всегда,
когда  есть возможность, выносить определения отдельных фрагментов в
специализированные функции.<br>
          <br>
  Теперь обратите внимание на функцию <b>setq</b>. Не вдаваясь в детали отметим,
 что это функция, предназначенная для присвоения
значения переменной, которая
 является первым аргументом. Значение определяется вторым аргументом, которым
 может быть и вызов функции. Собственно говоря, и имя самой переменной, которой
 присваивается значение, также может быть получено в результате вызова функции,
 но я вас пока такими примерами пугать не буду. <br>
          <br>
  И наконец, завершают программу несколько вызовов функций для вывода результатов
 расчетов. В данном случае нам достаточно трех из них.<br>
  Функция <b>prin1 </b>выводит на печать результат оценки значения своего 
первого аргумента, а функция <b>princ </b>интерпретирует свой аргумент как 
символьную строку. И наконец, <b>terpri</b> предназначена для перехода на 
новую строку. Конечно, в Лиспе имеются и более мощные, унифицированные средства 
форматирования входных и выходных потоков, но я
пока не буду забивать вам 
голову этими материями...         <br>
          <br>
  Итак, с программой вроде бы разобрались. Предположим, вы поместили ее в 
файл         <b>gipotenuza.lsp. </b>Теперь нам осталось запустить ее на выполнение.
 Сделать это можно двумя способами. Во-первых, вы можете вызвать gcl из командной
 строки, передав ему в качестве аргумента входной файл:<br>
          <br>
                   
        <blockquote><font color="#000000">gcl -f gipotenuza.lsp<br>
          </font>
            </blockquote>
            <br>
  Файл будет загружен и автоматически запущен на выполнение. А поскольку
последним вызовом функции в этом файле является команда завершения работы
Common Lisp,  на консоль будет выведена строка,<br>
            <br>
            <!--mstheme--></font><pre><font color="#000000">Треугольник имеет стороны: 12 5 13.0</font></pre><!--mstheme--><font face="Times New Roman">
            <br>
  Второй способ предполагает загрузку программы из самого Common
Lisp. Для
 этого вы используете вызов функции <b>load</b>, которой в качестве аргумента
 передается имя файла.<br>
            <br>
            <img src="article1/gcl3.png" alt="">
            <br>
            <br>
            <b>Рис.3. Вызов программ на Лиспе из командной строки и из среды.</b><br>
            <br>
  Все определения функций и их вызовы при любом способе вызова последовательно
 обрабатываются и выполняются. Конечно, если бы мы не ввели завершающий вызов
bye, то после завершения обработки программы мы остались бы в среде
GCL.
Но это правильно! Ведь на может потребоваться загрузить не только готовую
программу, но и скажем, файл, в котором содержатся определения наших функций.<br>
<h4>           Работа с графическим интерфейсом</h4>
 Ну что же, теперь пришло время познакомить читателя с использованием графического 
интерфейса. Одна из особенностей GCL заключается в том, что эта система позволяет 
достаточно просто подключать внешние библиотеки, входящие в состав
Linux. 
Одной из таких библиотек является Tk - это бибилотека для быстрого проектирования 
графического интерфейса пользователя. Во время компиляции вашей Лисп-системы 
эта библиотека была подключена к интерпретатору Лиспа и нам остается ее только 
активизировать.<br>
           <br>
 Конечно, чтобы детально понять, как работает приведенный ниже пример, вам 
потребуется гораздо больше информации, чем была приведена ниже. Но чтобы не
скрывать лес за деревьями, я не буду размениваться на частности. В конце концов
вы можете принимать пока  приводимые конструкции как некоторые "заклинания" 
суть которых станет ясна позднее. <br>
           <br>
 Ключевая конструкция для подключения графического интерфейса выглядит очень 
просто - это один единственный вызов функции<br>
           <br>
           <!--mstheme--></font><pre><font color="#000000">(si::tkconnect)</font></pre><!--mstheme--><font face="Times New Roman">
           <br>
 который приводит к открытию пустого окошка в среде X-Window (понятно, что 
запускать программу, ориетнированную на работу в "Иксах" вы должны при загруженном 
Х-сервере). Теперь давайте подойдем к проблеме радикально  - создадим аналог
&quot;Hello, World&quot;, ориентированный на работу в Tk-интерфейсе и поместим эту
программу в файл msg.lsp.<br>
           Вот ее текст:<br>
 <!--mstheme--></font><pre><font color="#000000">;;;
;;; msg.lsp - Программа вывода текстового окошка с испльзованием
;;;           встроенного шлюза Lisp-Tk
;;;

(si::tkconnect)   ; подключаем библиотеку Tk

(in-package &quot;TK&quot;) ; включаем ее каталог в наше пространство симоволов


;; Функция wm предназначена для настройки параметров оконного
;; менеджера. Данный вызов позволяет изменить заголовок окна
 
(wm :title '|.|' &quot;Всем привет от GCL 2.4.1&quot;)

;; Теперь создаем два фрейма в окошке - верхний для текстовых
;; сообщений, а нижний - для кнопок

(frame '.main :relief &quot;raised&quot; :borderwidth 0)
(pack '.main :side &quot;top&quot;)

(message '.main.txt :relief &quot;raised&quot; :borderwidth 1
                :width 600  
                :text  &quot;
                       Наша первая программа на Common Lisp!
                       Предназначена для вывода в окошке списка файлов
                       из корневого каталога системы
&quot; )
(frame '.buttons :relief &quot;raised&quot; :borderwidth 1)
(pack '.buttons :side &quot;bottom&quot;)

;; Помещаем фреймы в основное окно с использованием менеджера геометрии,
;; заимствованного из Tk в Java

(pack '.main.txt :side &quot;top&quot; :fill &quot;x&quot;)

;; Теперь нам необходимо создать кнопочку, помещаемую в нижний кадр и
;; связать с ней некоторую операцию

(button '.buttons.ls :text &quot;О программе&quot; :command `(about))
(button '.buttons.ok :text &quot;Закончить&quot; :command `(bye))

(pack '.buttons.ls '.buttons.ok :side &quot;left&quot; :expand 1)
(pack '.buttons :side &quot;bottom&quot; :expand &quot;yes&quot; :fill &quot;both&quot;)

(focus '|.|)


;; about - Новое сообщение

(defun about()
  (destroy '.main.txt)
  (message '.main.txt :text &quot;Мы легко можем заменить текущее сообщение
в окошке программы на новое. А чтобы завершить работу
достаточно нажать кнопку \&quot;Закончить\&quot;&quot; :width 600) 
   (pack '.main.txt)
)
</font></pre><!--mstheme--><font face="Times New Roman">
           В целом построение программы на Lisp/Tk не слишком отличается
от проектирования графического интерфейса на языке
Java. В конце концов,
и Tk, и Java родились в лабораториях фирмы Sun и используют
один и тот же
механизм описания геометрии экранных элементов. Поэтому необходимо только
указать  на общую последовательность действий. Вначале мы создаем корневое
окно, которое имеет зарезервированное имя <b>.,<br>
          </b>хотя и записывается в виде <b><font color="#000000">|.|</font> - </b>это просто одна из
маленьких хитростей на которых я не буду пока фиксировать ваше внимание.
Затем мы начинаем вводить сегменты экрана - фреймы, которые не слишком отличаются
от фреймов, используемых в HTML-файлах. А уже затем, в каждый фрейм мы помещаем
тот или иной экранный элемент. В нашем случае это текстовое сообщение (обратите
внимание на сохранение всех элементов форматирования строк) <br>
          
Во втором, нижнем фрейме мы помещаем две кнопочки. И снова менеджер геометрии
самостоятельно размещает их в пределах своей ответственности. Нам необходимо
только задать имя кнопки и определить команду, которая будет выполняться при 
нажатии на нее. А поскольку Лисп - это постоянный вызов функций, то вполне логично
связать с кнопкой либо свою собственную, либо системную функцию.<br>
Вот как выглядит результат работы нашей программы:
<br><br>
<!--mstheme--></font><table>
<tr>
<td><!--mstheme--><font face="Times New Roman"><img src="article1/msg1.png"><!--mstheme--></font></td><td><!--mstheme--><font face="Times New Roman">&nbsp;&nbsp;<!--mstheme--></font></td>
<td><!--mstheme--><font face="Times New Roman"><img src="article1/msg2.png"><!--mstheme--></font></td>
</tr>
</table><!--mstheme--><font face="Times New Roman">
            <br>
Как видно из приведенных рисунков, при корректно настроенной системной локали 
и установленных кириллических шрифтах вы вполне можете обойтись без принудительного
ввода описаний шрифтов. Впрочем видно также, что менеджер геометрии самостоятельно 
определяет размер окон, что не всегда желательно... Но в этом ничего страшного нет,
вскоре вы узнаете, как загнать своевольный Tk в прокрустово ложе требований
программиста. А пока что попробуйте &quot;пощупать&quot; Лисп самостоятельно - в 
следующем номере мы продолжим знакомство с основными конструкциями и приемами 
работы, но собственный опыт еще никому не мешал.    
            <br>
                       
<p>&nbsp;</p>
<p>&nbsp;</p>



      <p> &nbsp; </p>

<!--msthemeseparator--><p align="center"><img src="../../_themes/blueprnt/bluhorsd.gif" width="600" height="10" alt="horizontal rule"></p>



      <p> &nbsp; </p>
&nbsp;
<!-- SpyLOG f:0211 -->
<script language="javascript"><!--
Mu="u4689.42.spylog.com";Md=document;Mnv=navigator;Mp=1;
Mn=(Mnv.appName.substring(0,2)=="Mi")?0:1;Mrn=Math.random();
Mt=(new Date()).getTimezoneOffset();
Mz="p="+Mp+"&rn="+Mrn+"&t="+Mt;
My="";
My+="<a href='http://"+Mu+"/cnt?cid=468942&f=3&p="+Mp+"&rn="+Mrn+"' target='_blank'>";
My+="<img src='http://"+Mu+"/cnt?cid=468942&"+Mz+"&r="+escape(Md.referrer)+"&pg="+escape(window.location.href)+"' border=0  width=88 height=31  alt='SpyLOG'>";
My+="</a>";Md.write(My);//--></script><noscript>
<a href="http://u4689.42.spylog.com/cnt?cid=468942&f=3&p=1" target="_blank">
<img src="http://u4689.42.spylog.com/cnt?cid=468942&p=1" alt='SpyLOG' border='0'  width=88 height=31 >
</a></noscript>
<!-- SpyLOG  --><!--mstheme--></font><!--msnavigation--></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="Times New Roman">
<p>
<script type="text/javascript"><!--
var yandex_r = Math.round(Math.random() * 100000);
document.write('<sc'+'ript type="text/javascript" src="http://an.yandex.ru/code/14812?rnd=' + yandex_r + '&direct-style=2&direct-limit=4&market-style=0&market-limit=4"></'+'sc'+'ript>');
//--></script>
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h5>Послать письмо <a href="mailto:voldemarus@narod.ru">
voldemarus@narod.ru</a> &nbsp;<br>
Авторские права © 2003-2009
Картонная армия<br>
Последнее изменение:
января 09, 2010</h5>
<p></p>
<p></p>

<!--mstheme--></font></td></tr><!--msnavigation--></table></body>
</html>


